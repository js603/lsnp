{"version":3,"file":"static/js/657.c76e7cbd.chunk.js","mappings":"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","sources":["components/game/GameContainer.js","components/screens/TitleScreen.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\n\r\n// Game container component - main interface for the game\r\nconst GameContainer = ({ children, backgroundImage }) => {\r\n  const containerRef = useRef(null);\r\n\r\n  // Update dimensions on resize\r\n  useEffect(() => {\r\n    const updateDimensions = () => {\r\n      // We keep the function for resize handling but don't store dimensions\r\n      // since they're not used elsewhere in the component\r\n    };\r\n\r\n    // Initial dimensions\r\n    updateDimensions();\r\n\r\n    // Add event listener for window resize\r\n    window.addEventListener('resize', updateDimensions);\r\n\r\n    // Clean up\r\n    return () => {\r\n      window.removeEventListener('resize', updateDimensions);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Container ref={containerRef}>\r\n      <BackgroundLayer backgroundImage={backgroundImage} />\r\n      <ContentLayer>{children}</ContentLayer>\r\n    </Container>\r\n  );\r\n};\r\n\r\n// Styled components\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst BackgroundLayer = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-image: ${props => props.backgroundImage ? `url(${props.backgroundImage})` : 'none'};\r\n  background-size: cover;\r\n  background-position: center;\r\n  filter: brightness(0.7); /* Darken the background for better text readability */\r\n  transition: background-image 1s ease-in-out;\r\n  \r\n  /* Fallback background if no image is provided */\r\n  background-color: ${props => props.backgroundImage ? 'transparent' : '#121212'};\r\n`;\r\n\r\nconst ContentLayer = styled.div`\r\n  position: relative;\r\n  z-index: 1;\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-end; /* Position content at the bottom */\r\n  align-items: center;\r\n  padding: 2rem;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nexport default GameContainer;","import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useGame } from '../../contexts/GameContext';\r\nimport GameContainer from '../game/GameContainer';\r\nimport soundEffects from '../../services/audio/soundEffects';\r\n\r\n// Title screen component\r\nconst TitleScreen = () => {\r\n  const game = useGame();\r\n  const [showContinue, setShowContinue] = useState(false);\r\n  const [nameInput, setNameInput] = useState(game.playerName || '');\r\n  const [showNameInput, setShowNameInput] = useState(false);\r\n  \r\n  // Check if there's a saved game\r\n  useEffect(() => {\r\n    const savedGame = localStorage.getItem('pigeonweed_save');\r\n    setShowContinue(!!savedGame);\r\n    \r\n    // Note: We no longer try to play music or apply effects here\r\n    // Audio will be initialized on user interaction (button click)\r\n    \r\n    // Clean up\r\n    return () => {\r\n      // No need to clean up audio effects since they weren't applied\r\n    };\r\n  }, [game.currentBgm]);\r\n  \r\n  // Helper function to initialize audio system\r\n  const initializeAudio = async () => {\r\n    try {\r\n      // Initialize audio system after user interaction\r\n      await soundEffects.audioManager.initializeAfterUserInteraction();\r\n      \r\n      // Play title music if not already playing\r\n      if (game.currentBgm !== 'MAIN_THEME') {\r\n        soundEffects.playMusic('MAIN_THEME', { volume: -12 });\r\n      }\r\n      \r\n      // Apply subtle atmospheric effect\r\n      soundEffects.applyAtmosphericEffect(0.3);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Failed to initialize audio:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Handle start new game\r\n  const handleStartNewGame = async () => {\r\n    if (!nameInput.trim()) {\r\n      setShowNameInput(true);\r\n      return;\r\n    }\r\n    \r\n    // Initialize audio on user interaction\r\n    await initializeAudio();\r\n    \r\n    game.setPlayerName(nameInput);\r\n    game.startNewGame();\r\n  };\r\n  \r\n  // Handle continue game\r\n  const handleContinueGame = async () => {\r\n    // Initialize audio on user interaction\r\n    await initializeAudio();\r\n    \r\n    game.setCurrentScreen('game');\r\n    soundEffects.playSfx('UI_CLICK');\r\n  };\r\n  \r\n  // Handle name input change\r\n  const handleNameInputChange = (e) => {\r\n    setNameInput(e.target.value);\r\n  };\r\n  \r\n  // Handle name input submit\r\n  const handleNameInputSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (nameInput.trim()) {\r\n      // Initialize audio on user interaction\r\n      await initializeAudio();\r\n      \r\n      game.setPlayerName(nameInput);\r\n      handleStartNewGame();\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <GameContainer>\r\n      <TitleContainer>\r\n        <Title>비둘기밥의 밤</Title>\r\n        <Subtitle>Night of Pigeonweed</Subtitle>\r\n        \r\n        {showNameInput ? (\r\n          <NameInputForm onSubmit={handleNameInputSubmit}>\r\n            <NameInputLabel>Enter your name:</NameInputLabel>\r\n            <NameInput\r\n              type=\"text\"\r\n              value={nameInput}\r\n              onChange={handleNameInputChange}\r\n              autoFocus\r\n              maxLength={20}\r\n              placeholder=\"Your name...\"\r\n            />\r\n            <NameInputButton type=\"submit\">Start</NameInputButton>\r\n          </NameInputForm>\r\n        ) : (\r\n          <MenuContainer>\r\n            <MenuButton onClick={handleStartNewGame}>New Game</MenuButton>\r\n            {showContinue && (\r\n              <MenuButton onClick={handleContinueGame}>Continue</MenuButton>\r\n            )}\r\n            <MenuButton onClick={async () => {\r\n              await initializeAudio();\r\n              soundEffects.playSfx('UI_CLICK');\r\n              game.setCurrentScreen('auth');\r\n            }}>Login / Register</MenuButton>\r\n            <MenuButton onClick={async () => {\r\n              await initializeAudio();\r\n              soundEffects.playSfx('UI_CLICK');\r\n              game.setCurrentScreen('settings');\r\n            }}>Settings</MenuButton>\r\n            <MenuButton onClick={async () => {\r\n              await initializeAudio();\r\n              soundEffects.playSfx('UI_CLICK');\r\n              game.setCurrentScreen('credits');\r\n            }}>Credits</MenuButton>\r\n          </MenuContainer>\r\n        )}\r\n        \r\n        <VersionInfo>v0.1.0 - Alpha</VersionInfo>\r\n      </TitleContainer>\r\n    </GameContainer>\r\n  );\r\n};\r\n\r\n// Styled components\r\nconst TitleContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100%;\r\n  padding: 2rem;\r\n  background-color: rgba(0, 0, 0, 0.7);\r\n  color: #ffffff;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-size: 4rem;\r\n  margin-bottom: 0.5rem;\r\n  text-shadow: 0 0 10px rgba(0, 0, 0, 0.8);\r\n  font-family: 'Noto Serif', serif;\r\n  letter-spacing: 2px;\r\n`;\r\n\r\nconst Subtitle = styled.h2`\r\n  font-size: 1.5rem;\r\n  margin-bottom: 3rem;\r\n  opacity: 0.8;\r\n  text-shadow: 0 0 5px rgba(0, 0, 0, 0.8);\r\n  font-family: 'Noto Sans', sans-serif;\r\n  font-weight: 300;\r\n`;\r\n\r\nconst MenuContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n  width: 100%;\r\n  max-width: 300px;\r\n`;\r\n\r\nconst MenuButton = styled.button`\r\n  background-color: rgba(0, 0, 0, 0.6);\r\n  color: #ffffff;\r\n  border: 1px solid rgba(255, 255, 255, 0.3);\r\n  border-radius: 4px;\r\n  padding: 1rem;\r\n  font-size: 1.2rem;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n  \r\n  &:hover {\r\n    background-color: rgba(40, 40, 40, 0.8);\r\n    border-color: rgba(255, 255, 255, 0.6);\r\n    transform: translateY(-2px);\r\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\r\n  }\r\n  \r\n  &:active {\r\n    transform: translateY(0);\r\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\r\n  }\r\n`;\r\n\r\nconst NameInputForm = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n  width: 100%;\r\n  max-width: 300px;\r\n  margin-bottom: 2rem;\r\n`;\r\n\r\nconst NameInputLabel = styled.label`\r\n  font-size: 1.2rem;\r\n  text-align: center;\r\n`;\r\n\r\nconst NameInput = styled.input`\r\n  background-color: rgba(0, 0, 0, 0.6);\r\n  color: #ffffff;\r\n  border: 1px solid rgba(255, 255, 255, 0.3);\r\n  border-radius: 4px;\r\n  padding: 1rem;\r\n  font-size: 1.2rem;\r\n  \r\n  &:focus {\r\n    outline: none;\r\n    border-color: rgba(255, 255, 255, 0.6);\r\n    box-shadow: 0 0 8px rgba(255, 255, 255, 0.3);\r\n  }\r\n  \r\n  &::placeholder {\r\n    color: rgba(255, 255, 255, 0.5);\r\n  }\r\n`;\r\n\r\nconst NameInputButton = styled(MenuButton)`\r\n  margin-top: 1rem;\r\n`;\r\n\r\nconst VersionInfo = styled.div`\r\n  position: absolute;\r\n  bottom: 1rem;\r\n  right: 1rem;\r\n  font-size: 0.8rem;\r\n  opacity: 0.5;\r\n`;\r\n\r\nexport default TitleScreen;"],"names":["Container","styled","div","BackgroundLayer","props","backgroundImage","ContentLayer","_ref","children","containerRef","useRef","useEffect","updateDimensions","window","addEventListener","removeEventListener","_jsxs","ref","_jsx","TitleContainer","Title","h1","Subtitle","h2","MenuContainer","MenuButton","button","NameInputForm","form","NameInputLabel","label","NameInput","input","NameInputButton","VersionInfo","TitleScreen","game","useGame","showContinue","setShowContinue","useState","nameInput","setNameInput","playerName","showNameInput","setShowNameInput","savedGame","localStorage","getItem","currentBgm","initializeAudio","async","soundEffects","audioManager","initializeAfterUserInteraction","volume","error","console","handleStartNewGame","trim","setPlayerName","startNewGame","GameContainer","onSubmit","e","preventDefault","type","value","onChange","target","autoFocus","maxLength","placeholder","onClick","setCurrentScreen"],"sourceRoot":""}